import "./chunk-PZ5AY32C.js";

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/condition0/dist/index.esm.js
var e = { maxAttempts: 5, timeOut: 300, successEvent: "condition0_success", failEvent: "condition0_failure", isAsync: false, notifyBeforeEach: false, notifyAfterEach: false };
function i(i2) {
  return __awaiter(this, arguments, void 0, function* (i3, n = { maxAttempts: 0, timeOut: 0, successEvent: "", failEvent: "", isAsync: false, notifyBeforeEach: false, notifyAfterEach: false }) {
    var o;
    let s, c = false;
    function a(t, e2) {
      document.dispatchEvent(new CustomEvent(t, { detail: e2 }));
    }
    for ((n = Object.assign(Object.assign({}, e), n)).isAsync && (null === (o = i3()) || void 0 === o || o.then((t) => {
      c = t;
    })), s = 0; s <= n.maxAttempts; s++) if (n.notifyBeforeEach && a("condition0_beforeEach", { details: { iteration: s } }), n.isAsync ? yield Promise.race([new Promise((t) => setTimeout(() => {
      t(c);
    }, n.timeOut)), new Promise((t) => setTimeout(() => {
      t(false);
    }, n.timeOut))]) : c = yield new Promise((e2) => {
      setTimeout(() => __awaiter(this, void 0, void 0, function* () {
        e2(yield i3());
      }), n.timeOut);
    }), n.notifyAfterEach && a("condition0_afterEach", { details: { iteration: s } }), c) return void a(n.successEvent, { detail: { conditionMet: c, attemptsCompleted: s, options: n } });
    a(n.failEvent, { detail: { conditionMet: c, attemptsCompleted: s, options: n } });
  });
}
export {
  i as condition0
};
//# sourceMappingURL=condition0.js.map
